<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title>Python - 태그 - Joonshik Tech Blog</title><link>http://jshong0907.github.io/tags/python/</link><description>Python - 태그 - Joonshik Tech Blog</description><generator>Hugo -- gohugo.io</generator><language>ko</language><lastBuildDate>Thu, 11 Jul 2024 02:51:18 +0900</lastBuildDate><atom:link href="http://jshong0907.github.io/tags/python/" rel="self" type="application/rss+xml"/><item><title>[Python] GIL</title><link>http://jshong0907.github.io/posts/python-gil/</link><pubDate>Thu, 11 Jul 2024 02:51:18 +0900</pubDate><author><name>JoonShik</name><uri>http://jshong0907.github.io/authors/joonshik</uri><email>jshong0907@gmail.com</email></author><guid>http://jshong0907.github.io/posts/python-gil/</guid><description>&lt;div class="featured-image">
&lt;img src="/posts/python-gil/thumbnail.png" referrerpolicy="no-referrer">
&lt;/div>Python의 Global Interpreter Lock(GIL)은 여러 스레드가 동시에 Python 코드를 실행하는 것을 막는 기법입니다.</description></item><item><title>[Python] Garbage Collection</title><link>http://jshong0907.github.io/posts/python-gc/</link><pubDate>Wed, 10 Jul 2024 16:20:07 +0900</pubDate><author><name>JoonShik</name><uri>http://jshong0907.github.io/authors/joonshik</uri><email>jshong0907@gmail.com</email></author><guid>http://jshong0907.github.io/posts/python-gc/</guid><description>&lt;div class="featured-image">
&lt;img src="/posts/python-gc/thumbnail.png" referrerpolicy="no-referrer">
&lt;/div>가비지 컬렉션은 프로그래밍 언어에서 더 이상 필요하지 않은 객체를 자동으로 메모리에서 해제하는 메모리 관리 방법입니다. 그렇다면 Python에서는 어떻게 GC를 처리할까요?</description></item></channel></rss>